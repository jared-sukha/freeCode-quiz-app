{"version":3,"sources":["App.js","ApiClient.js","index.js"],"names":["App","useState","answers","setAnswers","quote","questions","setQuestions","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","showNextQuestion","setShowNextQuestion","showScoreButton","setshowScoreButton","colourChange","setColourChange","disable","setDisable","theTarget","setTheTarget","useEffect","quoteNum","request","get","then","res","sourceQuotes","body","randomQuestArr","length","r","Math","floor","random","indexOf","push","getRandomQuotes","map","x","character","filter","char","index","charArr","sourceAnswers","orderedAnsArr","console","log","sort","ansArr","className","onClick","window","location","reload","answer","i","disabled","key","evt","target","innerText","handleAnswerClick","nextQuestion","handleNextQuestionClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa0b9576.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { getRandomQuotes, getUniqueCharacters } from './ApiClient'\n\nexport default function App() {\n  const quoteNum = 4\n  const answerNum = 4\n\n  const [answers, setAnswers] = useState(['Loading...'])\n  // const [uniqueCharsAnswers, setUniqueCharsAnswers] = useState([])\n\n  const [questions, setQuestions] = useState([\n    {\n      quote: 'Loading...',\n      // character: 'Loading...',\n    },\n  ])\n\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [showScore, setShowScore] = useState(false)\n  const [score, setScore] = useState(0)\n  const [showNextQuestion, setShowNextQuestion] = useState(false)\n  const [showScoreButton, setshowScoreButton] = useState(false)\n  const [colourChange, setColourChange] = useState(false)\n  const [disable, setDisable] = useState(false)\n  const [theTarget, setTheTarget] = useState('')\n\n  useEffect(() => {\n    getRandomQuotes(quoteNum).then((randomQuestArr) => {\n      setQuestions(randomQuestArr)\n    })\n    // getUniqueCharacters().then((uniqueCharArr) => {\n    //   setUniqueCharsAnswers(uniqueCharArr)\n    //   console.log(uniqueCharArr)\n    // })\n  }, [])\n  // TODO UseEffect is loading twice!!!!\n\n  // useEffect(() => {\n  //   let orderedAnsArr = [questions[currentQuestion].character]\n  //   console.log('iniitial', orderedAnsArr)\n  // }, [questions])\n\n  // useEffect(() => {\n  //   function ansArr(charArr) {\n  //     let orderedAnsArr = []\n  //     // console.log('iniitial', orderedAnsArr)\n\n  //     while (orderedAnsArr.length < 4) {\n  //       console.log(orderedAnsArr)\n\n  //       let r = charArr[Math.floor(Math.random() * charArr.length)]\n  //       if (orderedAnsArr.indexOf(r) === -1) orderedAnsArr.push(r)\n  //     }\n  //     return orderedAnsArr.sort(() => Math.random() - 0.5)\n  //   }\n  //   setAnswers(ansArr)\n  // }, [currentQuestion])\n\n  useEffect(() => {\n    function ansArr(charArr) {\n      let sourceAnswers = charArr\n      let orderedAnsArr = [questions[currentQuestion].character]\n      while (orderedAnsArr.length < answerNum) {\n        console.log(orderedAnsArr)\n        let r = sourceAnswers[Math.floor(Math.random() * charArr.length)]\n        if (orderedAnsArr.indexOf(r) === -1) orderedAnsArr.push(r)\n      }\n      return orderedAnsArr.sort(() => Math.random() - 0.5)\n    }\n    getUniqueCharacters().then((charArr) => {\n      setAnswers(ansArr(charArr))\n    })\n  }, [questions, currentQuestion])\n\n  useEffect(()=>{\n    console.log('useEffect Hook ran',questions)\n  },[questions])\n\n  const handleAnswerClick = (answer, evt) => {\n    setDisable(true)\n    console.log(evt.target.innerText)\n    if (evt.target.innerText !== questions[currentQuestion].character) {\n      setTheTarget(evt.target.innerText)\n    }\n    setColourChange(true)\n    if (answer === questions[currentQuestion].character) {\n      setScore(score + 1)\n    }\n    if (currentQuestion + 1 < questions.length) {\n      setShowNextQuestion(true)\n    } else if (currentQuestion + 1 === questions.length) {\n      setshowScoreButton(true)\n    } else {\n      setShowNextQuestion(false)\n    }\n  }\n\n  const handleNextQuestionClick = () => {\n    setDisable(false)\n    const nextQuestion = currentQuestion + 1\n    setShowNextQuestion(false)\n    setColourChange(false)\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion)\n    }\n  }\n\n  const handleEndGameClick = () => {\n    setShowScore(true)\n  }\n\n  function refreshPage() {\n    window.location.reload(true)\n  }\n  // console.log(questions)\n  // console.log(currentQuestion)\n  return (\n    <div className=\"app\">\n      {showScore ? (\n        <div className=\"score-section\">\n          You scored {score} out of {questions.length}\n          <button onClick={refreshPage}>Replay?</button>\n        </div>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Who said it?</span>\n              <span>\n                {currentQuestion + 1}/{questions.length}\n              </span>\n            </div>\n            <div className=\"question-text\">\n              \"{questions[currentQuestion].quote}\"\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {answers.map((answer, i) => (\n              <button\n                disabled={disable}\n                className={\n                  'button ' +\n                  (colourChange &&\n                  answer === questions[currentQuestion].character\n                    ? 'correct'\n                    : colourChange && answer === theTarget\n                    ? 'incorrect'\n                    : '')\n                }\n                key={i}\n                onClick={(evt) => handleAnswerClick(answer, evt)}\n              >\n                {answer}\n              </button>\n            ))}\n          </div>\n          {showNextQuestion && (\n            <div className=\"next-question-section\">\n              <button\n                onClick={() => handleNextQuestionClick()}\n                className=\"next-button\"\n              >\n                Next Question\n              </button>\n            </div>\n          )}\n          {showScoreButton && (\n            <div className=\"next-question-section\">\n              <button\n                onClick={() => handleEndGameClick()}\n                className=\"next-button\"\n              >\n                Show Scores?\n              </button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n","import request from 'superagent'\n\nexport function getTheQuotes() {\n  return request\n    .get('https://predator-quotes.herokuapp.com/quotes')\n    .then((res) => {\n      console.log(res.body)\n      return res.body\n    })\n}\n\nexport function getRandomQuotes(quoteNum) {\n  return request\n    .get('https://predator-quotes.herokuapp.com/quotes/all')\n    .then((res) => {\n      let sourceQuotes = res.body\n      let randomQuestArr = []\n      while (randomQuestArr.length < quoteNum) {\n        let r = sourceQuotes[Math.floor(Math.random() * sourceQuotes.length)]\n        if (randomQuestArr.indexOf(r) === -1) randomQuestArr.push(r)\n      }\n      // console.log(res.body[Math.floor(Math.random() * res.body.length)])\n      // console.log('random', randomQuestArr)\n      return randomQuestArr\n    })\n\n}\n\nexport function getPonchoQuotes() {\n  return request\n    .get('https://predator-quotes.herokuapp.com/quotes/bycharacter/poncho')\n    .then((res) => {\n      console.log(res.body)\n      return res.body\n    })\n}\n\nexport function getUniqueCharacters(){\n  return request\n  .get('https://predator-quotes.herokuapp.com/quotes/all')\n  .then((res) => {\n    const uniqueChars = res.body.map((x) => x.character).filter((char, index, charArr) => charArr.indexOf(char) === index)\n    return uniqueChars\n  })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}